predicate jacop_alldiff(array [int] of var int: x);
predicate jacop_among(array [int] of var int: x, set of int: v, var int: n);
predicate jacop_among_var(array [int] of var int: x, array [int] of var int: v, var int: n);
predicate jacop_assignment(array [int] of var int: f, array [int] of var int: invf, int: index_f, int: index_invf);
predicate jacop_bin_packing(array [int] of var int: bin, array [int] of var int: cap, array [int] of int: w);
predicate jacop_circuit(array [int] of var int: x);
predicate jacop_count(array [int] of var int: x, int: y, var int: c);
predicate jacop_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate jacop_diff2(array [int, int] of var int: r);
predicate jacop_disjoint(var set of int: s1, var set of int: s2);
predicate jacop_gcc(array [int] of var int: x, array [int] of var int: c, int: index);
predicate jacop_global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate jacop_global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate jacop_lex_less_bool(array [int] of var bool: x, array [int] of var bool: y);
predicate jacop_lex_less_int(array [int] of var int: x, array [int] of var int: y);
predicate jacop_lex_lesseq_bool(array [int] of var bool: x, array [int] of var bool: y);
predicate jacop_lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
predicate jacop_minimum(var int: m, array [int] of var int: x);
predicate jacop_nvalue(var int: n, array [int] of var int: x);
predicate jacop_regular(array [int] of var int: x, int: Q, int: S, array [int, int] of int: d, int: q0, set of int: F, int: min_index);
predicate jacop_table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate jacop_table_int(array [int] of var int: x, array [int, int] of int: t);
array [1..12] of int: addTimes = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
array [1..16] of int: mulCost = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
array [1..16] of int: mulTimes = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2];
array [1..12] of var 1..1: addCost = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
array [1..12] of var int: adds;
var int: end :: output_var;
array [1..16] of var int: muls;
array [1..28] of var int: index = [muls[1], muls[2], muls[3], muls[4], muls[5], muls[6], muls[7], muls[8], adds[1], adds[2], adds[3], adds[4], adds[5], adds[6], muls[9], muls[10], muls[11], muls[12], adds[7], adds[8], muls[13], muls[14], muls[15], muls[16], adds[9], adds[10], adds[11], adds[12]];
constraint int_lin_le([-1, 1], [end, adds[11]], -1);
constraint int_lin_le([-1, 1], [end, adds[12]], -1);
constraint int_lin_le([-1, 1], [adds[1], muls[1]], -2);
constraint int_lin_le([-1, 1], [adds[1], muls[2]], -2);
constraint int_lin_le([-1, 1], [adds[2], muls[3]], -2);
constraint int_lin_le([-1, 1], [adds[2], muls[4]], -2);
constraint int_lin_le([-1, 1], [adds[3], muls[5]], -2);
constraint int_lin_le([-1, 1], [adds[3], muls[6]], -2);
constraint int_lin_le([-1, 1], [adds[4], muls[7]], -2);
constraint int_lin_le([-1, 1], [adds[4], muls[8]], -2);
constraint int_lin_le([-1, 1], [adds[7], muls[9]], -2);
constraint int_lin_le([-1, 1], [adds[7], muls[10]], -2);
constraint int_lin_le([-1, 1], [adds[8], muls[11]], -2);
constraint int_lin_le([-1, 1], [adds[8], muls[12]], -2);
constraint int_lin_le([-1, 1], [adds[9], muls[13]], -2);
constraint int_lin_le([-1, 1], [adds[9], muls[14]], -2);
constraint int_lin_le([-1, 1], [adds[10], muls[15]], -2);
constraint int_lin_le([-1, 1], [adds[10], muls[16]], -2);
constraint int_lin_le([1, -1], [adds[1], adds[11]], -1);
constraint int_lin_le([1, -1], [adds[2], adds[5]], -1);
constraint int_lin_le([1, -1], [adds[3], adds[6]], -1);
constraint int_lin_le([1, -1], [adds[4], adds[12]], -1);
constraint int_lin_le([1, -1], [adds[5], muls[9]], -1);
constraint int_lin_le([1, -1], [adds[5], muls[11]], -1);
constraint int_lin_le([1, -1], [adds[6], muls[10]], -1);
constraint int_lin_le([1, -1], [adds[6], muls[12]], -1);
constraint int_lin_le([1, -1], [adds[7], muls[13]], -1);
constraint int_lin_le([1, -1], [adds[7], muls[15]], -1);
constraint int_lin_le([1, -1], [adds[8], muls[14]], -1);
constraint int_lin_le([1, -1], [adds[8], muls[16]], -1);
constraint int_lin_le([1, -1], [adds[9], adds[11]], -1);
constraint int_lin_le([1, -1], [adds[10], adds[12]], -1);
constraint jacop_cumulative(adds, addTimes, addCost, 1);
constraint jacop_cumulative(muls, mulTimes, mulCost, 1);
solve minimize end;
